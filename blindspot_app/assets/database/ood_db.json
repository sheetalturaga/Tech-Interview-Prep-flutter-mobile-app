{
  "id": "topic003",
  "topic": "Object-Oriented Design (OOD)",
  "image_url": "",
  "description": "Multiple Choice Questions (MCQ) to practice Object-Oriented Design Concepts",
  "questions": [
    {
      "id": "topic003q001",
      "question": "Which of the following is an example of encapsulation in object-oriented design?",
      "options": [
        {
          "identifier": "A",
          "option": "Inheritance"
        },
        {
          "identifier": "B",
          "option": "Polymorphism"
        },
        {
          "identifier": "C",
          "option": "Abstraction"
        },
        {
          "identifier": "D",
          "option": "Private Data Members and public getters and setters"
        }
      ],
      "correct_option": "D",
      "explanation": "Encapsulation is the process of hiding implementation details and exposing only necessary information to the outside world. Private data members and public getters and setters help achieve encapsulation."
    },
    {
      "id": "topic003q002",
      "question": "Which of the following best describes inheritance in object-oriented design?",
      "options": [
        {
          "identifier": "A",
          "option": "The ability of an object to take on many forms"
        },
        {
          "identifier": "B",
          "option": "The ability to reuse code by creating new classes based on existing ones"
        },
        {
          "identifier": "C",
          "option": "The ability to group related classes into packages"
        },
        {
          "identifier": "D",
          "option": "The ability to access members of a class from outside the class"
        }
      ],
      "correct_option": "B",
      "explanation": "Inheritance is the ability to create new classes based on existing ones. The new class inherits properties and behavior from the existing class, and can also add new properties and behavior of its own"
    },
    {
      "id": "topic003q003",
      "question": "Which of the following best describes polymorphism in object-oriented design?",
      "options": [
        {
          "identifier": "A",
          "option": "The ability to take on many forms"
        },
        {
          "identifier": "B",
          "option": "The ability to reuse code by creating new classes based on existing ones"
        },
        {
          "identifier": "C",
          "option": "The ability to group related classes into packages"
        },
        {
          "identifier": "D",
          "option": "The ability to access members of a class from outside the class"
        }
      ],
      "correct_option": "A",
      "explanation": "Polymorphism is the ability of an object to take on many forms. It allows different objects to respond to the same message in different ways."
    },
    {
      "id": "topic003q004",
      "question": "Which of the following is an example of abstraction in object-oriented design?",
      "options": [
        {
          "identifier": "A",
          "option": "Private data members"
        },
        {
          "identifier": "B",
          "option": "Public getters and setters"
        },
        {
          "identifier": "C",
          "option": "Interfaces"
        },
        {
          "identifier": "D",
          "option": "Inheritance"
        }
      ],
      "correct_option": "C",
      "explanation": "Abstraction is the process of hiding implementation details and exposing only necessary information to the outside world. Interfaces are a good example of abstraction because they define a set of methods that a class must implement without specifying how the methods should be implemented."
    },
    {
      "id": "topic003q005",
      "question": "Which of the following is not a principle of object-oriented design?",
      "options": [
        {
          "identifier": "A",
          "option": "Encapsulation"
        },
        {
          "identifier": "B",
          "option": "Inheritance"
        },
        {
          "identifier": "C",
          "option": "Modularity"
        },
        {
          "identifier": "D",
          "option": "Efficiency"
        }
      ],
      "correct_option": "D",
      "explanation": "Efficiency is not a principle of object-oriented design. The main principles of object-oriented design are encapsulation, inheritance, polymorphism, and abstraction. Modularity is also an important principle that promotes the separation of concerns in software design."
    },
    {
      "id": "topic003q006",
      "question": "Which of the following best describes inheritance in object-oriented design?",
      "options": [
        {
          "identifier": "A",
          "option": "The ability of an object to take on many forms"
        },
        {
          "identifier": "B",
          "option": "The ability to reuse code by creating new classes based on existing ones"
        },
        {
          "identifier": "C",
          "option": "The ability to group related classes into packages"
        },
        {
          "identifier": "D",
          "option": "The ability to access members of a class from outside the class"
        }
      ],
      "correct_option": "B",
      "explanation": "Inheritance is the ability to create new classes based on existing ones. The new class inherits properties and behavior from the existing class, and can also add new properties and behavior of its own."
    },
    {
      "id": "topic003q007",
      "question": "Which of the following is an example of the SOLID principles of object-oriented design?",
      "options": [
        {
          "identifier": "A",
          "option": "Single responsibility principle"
        },
        {
          "identifier": "B",
          "option": "Multiple inheritance principle"
        },
        {
          "identifier": "C",
          "option": "Function overloading principle"
        },
        {
          "identifier": "D",
          "option": "Method overloading principle"
        }
      ],
      "correct_option": "A",
      "explanation": "The SOLID principles of object-oriented design are a set of guidelines that help developers create flexible and maintainable software. The Single Responsibility Principle (SRP) states that a class should have only one reason to change, meaning it should only have one responsibility or job."
    },
    {
      "id": "topic003q008",
      "question": "Which of the following is NOT a fundamental principle of Object-Oriented Design?",
      "options": [
        {
          "identifier": "A",
          "option": "Encapsulation"
        },
        {
          "identifier": "B",
          "option": "Inheritance"
        },
        {
          "identifier": "C",
          "option": "Abstraction"
        },
        {
          "identifier": "D",
          "option": "Complexity"
        }
      ],
      "correct_option": "D",
      "explanation": "The fundamental principles of OOD are Encapsulation, Inheritance, and Abstraction. These principles help developers create software that is modular, flexible, and easy to maintain. Encapsulation refers to the practice of bundling data and methods together in a single unit, while inheritance allows objects to inherit properties and behavior from their parent objects. Abstraction involves defining general concepts that can be used across different classes and objects, allowing developers to write code that is more reusable and modular. Complexity, on the other hand, is not a fundamental principle of OOD, although it is an important consideration when designing software."
    },
    {
      "id": "topic003q009",
      "question": "Which of the following concepts is used to describe the ability of an object to take on many forms?",
      "options": [
        {
          "identifier": "A",
          "option": "Encapsulation"
        },
        {
          "identifier": "B",
          "option": "Inheritance"
        },
        {
          "identifier": "C",
          "option": "Abstraction"
        },
        {
          "identifier": "D",
          "option": "Polymorphism"
        }
      ],
      "correct_option": "D",
      "explanation": "Polymorphism is the ability of an object to take on many forms. In the context of Object-Oriented Design, polymorphism refers to the ability of objects to behave in different ways depending on their context or the messages they receive. This is often achieved through the use of inheritance and interfaces"
    },
    {
      "id": "topic003q010",
      "question": "Which of the following is a design pattern that separates the construction of a complex object from its representation, allowing the same construction process to create different representations?",
      "options": [
        {
          "identifier": "A",
          "option": "Singleton pattern"
        },
        {
          "identifier": "B",
          "option": "Factory pattern"
        },
        {
          "identifier": "C",
          "option": "Builder pattern"
        },
        {
          "identifier": "D",
          "option": "Prototype pattern"
        }
      ],
      "correct_option": "C",
      "explanation": "The Builder pattern is a design pattern that separates the construction of a complex object from its representation, allowing the same construction process to create different representations. This pattern is often used to create complex objects that have many different parts or attributes that can be configured in different ways. The Builder pattern is typically implemented using a Builder class, which is responsible for constructing the object, and a Director class, which is responsible for managing the construction process."
    }
  ]
}